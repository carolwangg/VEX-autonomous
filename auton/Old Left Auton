#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
frDrive = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)
flDrive = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)
brDrive = Motor(Ports.PORT13, GearSetting.RATIO_18_1, False)
blDrive = Motor(Ports.PORT18, GearSetting.RATIO_18_1, True)
catapult = Motor(Ports.PORT15, GearSetting.RATIO_18_1, True)
inertial = Inertial(Ports.PORT12)
arm = Motor(Ports.PORT17, GearSetting.RATIO_18_1, False)
controller_1 = Controller(PRIMARY)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:      VEXcode Project
#	Author:       VEX
#	Created:
#	Description:  VEXcode V5 Python Project
# 
# ------------------------------------------

# Library imports
from vex import *
brain.screen.print("Ravens <3")


def pre_autonomous():
    #inertial.calibrate()
    #wait(2, SECONDS)
    #print("calibrate done")

def fullStop():
    frDrive.stop()
    brDrive.stop()
    flDrive.stop()
    blDrive.stop()

def autonomous():

    wait(1, MSEC)
    # place automonous code here
    brain.screen.clear_screen()
    brain.screen.print("autonomous")
    inertial.calibrate()

    #callibrate
    wait(2, SECONDS)

    #start at the bottom left of the field
    frDrive.set_velocity(60, PERCENT)
    brDrive.set_velocity(60, PERCENT)
    flDrive.set_velocity(60, PERCENT)
    blDrive.set_velocity(60, PERCENT)

    #back up
    while frDrive.position(TURNS) > -1.38:
        frDrive.spin(REVERSE)
        brDrive.spin(REVERSE)
        flDrive.spin(REVERSE)
        blDrive.spin(REVERSE)

    fullStop()
    wait(1, SECONDS)

    #turn 90 degrees left
    while frDrive.position(TURNS) < -0.15 and flDrive.position(TURNS) > -2.68:
        frDrive.spin(FORWARD)
        brDrive.spin(FORWARD)
        flDrive.spin(REVERSE)
        blDrive.spin(REVERSE)
    
    fullStop()
    wait(1, SECONDS)

    #back up to match load zone
    while frDrive.position(TURNS) > -0.75 and flDrive.position(TURNS) > -3.28:
        frDrive.spin(REVERSE)
        brDrive.spin(REVERSE)
        flDrive.spin(REVERSE)
        blDrive.spin(REVERSE)
    
    fullStop()
    wait(1, SECONDS)

    arm.set_velocity(60, PERCENT)
    arm.spin_to_position((180, DEGREES)
    wait(4, SECONDS)

    #turn 180 degrees left
    while frDrive.position(TURNS) < 1.51 and flDrive.position(TURNS) > -4.58:
        frDrive.spin(FORWARD)
        brDrive.spin(FORWARD)
        flDrive.spin(REVERSE)
        blDrive.spin(REVERSE)
    
    fullStop()
    wait(1, SECONDS)

def user_control():
    wait(1, MSEC)

#pre_autonomous()
autonomous()
