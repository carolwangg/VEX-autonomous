#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
flDrive = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)
blDrive = Motor(Ports.PORT13, GearSetting.RATIO_18_1, False)
frDrive = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)
brDrive = Motor(Ports.PORT18, GearSetting.RATIO_18_1, True)
controller_1 = Controller(PRIMARY)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:      VEXcode Project
#	Author:       VEX
#	Created:
#	Description:  VEXcode V5 Python Project
# 
# ------------------------------------------

# Library imports
from vex import *

# Begin project code

def pre_autonomous():
    # actions to do when the program starts
    brain.screen.clear_screen()
    brain.screen.print("pre auton code")
    wait(1, SECONDS)

def autonomous():
    brain.screen.clear_screen()
    brain.screen.print("autonomous code")
    # place automonous code here
def skim(v):
    # gain determines how much to skim off the top
    if (v > 0):
        return -(v * 0.1)
    elif (v < 0):
        return (v * 0.1)
    return 0
    
def user_control():
    brain.screen.clear_screen()
    # place driver control in this while loop
    frDrive.set_stopping(BRAKE)
    brDrive.set_stopping(BRAKE)
    flDrive.set_stopping(BRAKE)
    blDrive.set_stopping(BRAKE)
    
    while True:
        fbSpeed = controller_1.axis3.position()
        lrSpeed = controller_1.axis1.position()
        
        #drivecode
        if fbSpeed<=5 and fbSpeed>=-5:
            fbSpeed = 0
        if lrSpeed<=5 and lrSpeed>=-5:
            lrSpeed = 0
        if lrSpeed != 0 or fbSpeed != 0:
            if lrSpeed > fbSpeed:                
                lrSpeed += skim(fbSpeed)
            frDrive.set_velocity((fbSpeed - lrSpeed), PERCENT)
            print("fr:",(fbSpeed - lrSpeed))
            flDrive.set_velocity((fbSpeed + lrSpeed), PERCENT)
            brDrive.set_velocity((fbSpeed - lrSpeed), PERCENT)
            blDrive.set_velocity((fbSpeed + lrSpeed), PERCENT)
            frDrive.spin(FORWARD)
            flDrive.spin(FORWARD)
            blDrive.spin(FORWARD)
            brDrive.spin(FORWARD)
        elif lrSpeed != 0 and fbSpeed == 0:
            frDrive.set_velocity(fbSpeed - lrSpeed, PERCENT)
            flDrive.set_velocity(fbSpeed + lrSpeed, PERCENT)
            brDrive.set_velocity(fbSpeed - lrSpeed, PERCENT)
            blDrive.set_velocity(fbSpeed + lrSpeed, PERCENT)
            frDrive.spin(FORWARD)
            flDrive.spin(FORWARD)
            blDrive.spin(FORWARD)
            brDrive.spin(FORWARD)
        else:
            frDrive.stop()
            brDrive.stop()
            blDrive.stop()
            flDrive.stop() 
        
comp = Competition(user_control, autonomous)
pre_autonomous()
