{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\r\nfrom vex import *\r\nimport urandom\r\n\r\n# Brain should be defined by default\r\nbrain=Brain()\r\n\r\n# Robot configuration code\r\n\r\n\r\n# wait for rotation sensor to fully initialize\r\nwait(30, MSEC)\r\n#region VEXcode Generated Robot Configuration\r\nfrom vex import *\r\nimport urandom\r\n\r\n# Robot configuration code\r\nfrDrive = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\r\nflDrive = Motor(Ports.PORT20, GearSetting.RATIO_18_1, False)\r\nbrDrive = Motor(Ports.PORT13, GearSetting.RATIO_18_1, False)\r\nblDrive = Motor(Ports.PORT18, GearSetting.RATIO_18_1, False)\r\ncatapult = Motor(Ports.PORT15, GearSetting.RATIO_18_1, True)\r\ninertial = Inertial(Ports.PORT12)\r\n\r\ndef play_vexcode_sound(sound_name):\r\n    # Helper to make playing sounds from the V5 in VEXcode easier and\r\n    # keeps the code cleaner by making it clear what is happening.\r\n    print(\"VEXPlaySound:\" + sound_name)\r\n    wait(5, MSEC)\r\n\r\n# add a small delay to make sure we don't print in the middle of the REPL header\r\nwait(200, MSEC)\r\n# clear the console to make sure we don't have the REPL in the console\r\nprint(\"\\033[2J\")\r\n\r\n#endregion VEXcode Generated Robot Configuration\r\n\r\n# ------------------------------------------\r\n# \r\n# \tProject:      VEXcode Project\r\n#\tAuthor:       VEX\r\n#\tCreated:\r\n#\tDescription:  VEXcode V5 Python Project\r\n# \r\n# ------------------------------------------\r\n\r\n# Library imports\r\nfrom vex import *\r\nbrain.screen.print(\"Ravens <3\")\r\n\r\ndef pre_autonomous():\r\n    brain.screen.clear_screen()\r\n    brain.screen.print(\"pre-autonomous\")\r\n    inertial.calibrate()\r\n    wait(2, SECONDS)\r\n\r\ndef autonomous():\r\n\r\n    wait(1, MSEC)\r\n    # place automonous code here\r\n    brain.screen.clear_screen()\r\n    brain.screen.print(\"autonomous\")\r\n    inertial.set_heading(0, DEGREES)\r\n    #start at the bottom left of the field\r\n\r\n    print(inertial.heading(DEGREES))\r\n    curInertial = inertial.heading(DEGREES)\r\n    turnNum = 0\r\n\r\n    #first turn, left\r\n    while turnNum != 1:\r\n        frDrive.spin(FORWARD)\r\n        flDrive.spin(FORWARD)\r\n        brDrive.spin(FORWARD)\r\n        blDrive.spin(FORWARD)\r\n\r\n        curInertial = inertial.heading(DEGREES)\r\n\r\n        if curInertial >= 263 and curInertial <= 277:\r\n            frDrive.stop()\r\n            flDrive.stop()\r\n            brDrive.stop()\r\n            blDrive.stop()\r\n            turnNum = 1\r\n        \r\n\r\n\r\n    print(\"first turn finished\")\r\n    print(inertial.heading(DEGREES))\r\n\r\n    #second turn, right\r\n    while turnNum != 2:\r\n        frDrive.spin(REVERSE)\r\n        flDrive.spin(REVERSE)\r\n        brDrive.spin(REVERSE)\r\n        blDrive.spin(REVERSE)\r\n        print(\"carollll\")\r\n\r\n        curInertial = inertial.heading(DEGREES)\r\n\r\n        if curInertial >= -7 and curInertial <= 7:\r\n            frDrive.stop()\r\n            flDrive.stop()\r\n            brDrive.stop()\r\n            blDrive.stop()\r\n            turnNum = 2\r\n\r\n    #third turn, right\r\n    while turnNum != 3:\r\n        frDrive.spin(REVERSE)\r\n        flDrive.spin(REVERSE)\r\n        brDrive.spin(REVERSE)\r\n        blDrive.spin(REVERSE)\r\n\r\n        curInertial = inertial.heading(DEGREES)\r\n\r\n        if curInertial >= 83 and curInertial <= 97:\r\n            frDrive.stop()\r\n            flDrive.stop()\r\n            brDrive.stop()\r\n            blDrive.stop()\r\n            turnNum = 3\r\n    \r\n    #fourth turn, left\r\n    while turnNum != 4:\r\n        frDrive.spin(FORWARD)\r\n        flDrive.spin(FORWARD)\r\n        brDrive.spin(FORWARD)\r\n        blDrive.spin(FORWARD)\r\n\r\n        curInertial = inertial.heading(DEGREES)\r\n\r\n        if curInertial >= -7 and curInertial <= 7:\r\n            frDrive.stop()\r\n            flDrive.stop()\r\n            brDrive.stop()\r\n            blDrive.stop()\r\n            turnNum = 4\r\n'''\r\n    #turn 45 degrees right\r\n    while inertial.heading(DEGREES) != 315:\r\n\r\n        frDrive.spin(REVERSE)\r\n        flDrive.spin(REVERSE)\r\n        brDrive.spin(REVERSE)\r\n        blDrive.spin(REVERSE)\r\n\r\n        curInertial = inertial.heading(DEGREES)\r\n\r\n        if curInertial >= 305 or curInertial <= 325:\r\n            frDrive.stop()\r\n            flDrive.stop()\r\n            brDrive.stop()\r\n            blDrive.stop()\r\n\r\n    #test driving forward\r\n    frDrive.spin_for(FORWARD, 90, DEGREES, wait = False)\r\n    flDrive.spin_for(FORWARD, 90, DEGREES, wait = False)\r\n    brDrive.spin_for(FORWARD, 90, DEGREES, wait = False)\r\n    blDrive.spin_for(FORWARD, 90, DEGREES, wait = False)\r\n\r\ndef user_control():\r\n    wait(1, MSEC)\r\n\r\n\r\n\r\n'''\r\npre_autonomous()\r\nautonomous()","textLanguage":"python","rconfig":[],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.2","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}