#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
frDrive = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)
flDrive = Motor(Ports.PORT20, GearSetting.RATIO_6_1, False)
brDrive = Motor(Ports.PORT1, GearSetting.RATIO_6_1, False)
blDrive = Motor(Ports.PORT10, GearSetting.RATIO_6_1, False)
controller_1 = Controller(PRIMARY)
catapult = Motor(Ports.PORT6, GearSetting.RATIO_36_1, False)
mrDrive = Motor(Ports.PORT2, GearSetting.RATIO_6_1, True)
mlDrive = Motor(Ports.PORT9, GearSetting.RATIO_6_1, True)


# wait for rotation sensor to fully initialize
wait(30, MSEC)


def play_vexcode_sound(sound_name):
    # Helper to make playing sounds from the V5 in VEXcode easier and
    # keeps the code cleaner by making it clear what is happening.
    print("VEXPlaySound:" + sound_name)
    wait(5, MSEC)

# add a small delay to make sure we don't print in the middle of the REPL header
wait(200, MSEC)
# clear the console to make sure we don't have the REPL in the console
print("\033[2J")

#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:
#	Author:
#	Created:
#	Configuration:
# 
# ------------------------------------------

# Library imports
from vex import *
#47,17,39
# Begin project code


def pre_autonomous():
    wait(1, SECONDS)

def autonomous():
    autonRight()

def autonRight():
    #drive forward
    setpoint1 = 7.6 #8.09
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    """
    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(90, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(90, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()
    """
    
    setpoint1 = avgturns()+1.7 #1.67
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    setpoint1 = avgturns()-2
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    """
    #change
    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(-33, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(-33, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()
    """

    setpoint1 = avgturns() + 1.3
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    """
    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(90, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(90, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()
    """

    setpoint1 = avgturns()+2.8
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    setpoint1 = avgturns()-2.8
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    """
    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(-73, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(-73, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()
    """

    setpoint1 = avgturns()+3
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    """
    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(90, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(90, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()
    """

    setpoint1 = avgturns() + 5.6
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    setpoint1 = avgturns()-1.5
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()
"""
def autonRightWP():
    brain.screen.clear_screen()
    brain.screen.print("autonomous")
    inertial.calibrate()
    wait(2, SECONDS)

    #drive forward
    setpoint1 = 7.6 #8.09
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(90, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(90, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()

    arm.set_stopping(HOLD)
    arm.spin_to_position(60, DEGREES, wait=True)
    arm.stop()
    
    setpoint1 = avgturns()+1.7 #1.67
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    setpoint1 = avgturns()-2
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(-33, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(-33, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()

    setpoint1 = avgturns() + 1.3
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    arm.set_stopping(COAST)
    arm.spin_to_position(0, DEGREES, wait=True)

    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(90, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(90, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()
    
    arm.set_stopping(HOLD)
    arm.spin_to_position(60, DEGREES)
    arm.stop()

    setpoint1 = avgturns()+2.8
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    setpoint1 = avgturns()-2.8
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    #change
    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(90, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(90, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()

    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(37, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(37, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()

    setpoint1 = avgturns()-5
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    arm.spin_to_position(90, DEGREES, wait=True)
    arm.set_stopping(COAST)
    arm.stop()
def autonLeftWP():
    #drive forward
    setpoint1 = 5.8 #8.09
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(45, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(45, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()

    setpoint1 = avgturns() + 1.9
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    setpoint1 = avgturns() - 1.9
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(0, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(0, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()

    setpoint1 = avgturns() - 2.5 
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(90, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(90, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()

    setpoint1 = avgturns() - 0.8 
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()

    arm.spin_to_position(180, DEGREES, wait=True)
    arm.stop()
    arm.set_stopping(COAST)

    wait(100, MSEC)

    turnrightpercent(-60)
    wait(1, SECONDS)
    drivestop()

    turnrightpercent(30)
    wait(500, MSEC)
    drivestop()

    arm.spin_to_position(45, DEGREES, wait=True)
    arm.stop()
    arm.set_stopping(COAST)

    curpos = anglewrapdeg(inertial.heading(DEGREES))
    while pidturnpower2(0, curpos) is not 0:                                                                            
        turnrightpercent(pidturnpower2(0, curpos))
        curpos = anglewrapdeg(inertial.heading(DEGREES))
        wait(50, MSEC)
    drivestop()

    setpoint1 = avgturns() - 3.54
    while piddrivepower1(setpoint1, avgturns()) is not 0:
        driveforwardpercent(piddrivepower1(setpoint1, avgturns()))
        wait(50, MSEC)
    drivestop()
"""
def user_control():
    # controller_1.buttonUp.pressed(armSpinToPosition)

    brain.screen.clear_screen()
    catapult.set_velocity(100, PERCENT)
    printed = False #for testing purposes
    while True:
        # fbSpeed = controller_1.axis3.position()**3/(100**2)
        # lrSpeed = controller_1.axis1.position()**3/(100**2)
        fbSpeed = controller_1.axis3.position()
        lrSpeed = controller_1.axis1.position()

        # armSpeed = controller_1.axis2.position()
        # if abs(armSpeed) <= 5 or (-10 < arm.position(DEGREES) < 10 and armSpeed > 0):
        #     armSpeed = 0
        # if armSpeed != 0:
        #     armSpeed = controller_1.axis2.position()
        #     arm.spin(FORWARD)
        #     arm.set_velocity(-armSpeed, PERCENT)
        #     arm.set_stopping(COAST)
        # else:
        #     #if armMoving != true
        #     arm.stop()
        #drivecode
        fbSpeed = controller_1.axis3.position()
        lrSpeed = controller_1.axis1.position()
        
        #drivecode
        if fbSpeed<=5 and fbSpeed>=-5:
            fbSpeed = 0
        if lrSpeed<=5 and lrSpeed>=-5:
            lrSpeed = 0
        if lrSpeed != 0 or fbSpeed != 0:
            if lrSpeed > fbSpeed:                
                lrSpeed += skim(fbSpeed)
            frDrive.set_velocity((fbSpeed - lrSpeed), PERCENT)
            flDrive.set_velocity((fbSpeed + lrSpeed), PERCENT)
            brDrive.set_velocity((fbSpeed - lrSpeed), PERCENT)
            blDrive.set_velocity((fbSpeed + lrSpeed), PERCENT)
            mrDrive.set_velocity((fbSpeed - lrSpeed), PERCENT)
            mlDrive.set_velocity((fbSpeed + lrSpeed), PERCENT)
            frDrive.spin(FORWARD)
            flDrive.spin(FORWARD)
            blDrive.spin(FORWARD)
            brDrive.spin(FORWARD)
            mlDrive.spin(FORWARD)
            mrDrive.spin(FORWARD)
        elif lrSpeed != 0 and fbSpeed == 0:
            if lrSpeed > fbSpeed:                
                lrSpeed += skim(lrSpeed)
            frDrive.set_velocity(-lrSpeed, PERCENT)
            flDrive.set_velocity(lrSpeed, PERCENT)
            brDrive.set_velocity(-lrSpeed, PERCENT)
            blDrive.set_velocity(lrSpeed, PERCENT)
            mrDrive.set_velocity(-lrSpeed, PERCENT)
            mlDrive.set_velocity(lrSpeed, PERCENT)
            frDrive.spin(FORWARD)
            flDrive.spin(FORWARD)
            blDrive.spin(FORWARD)
            brDrive.spin(FORWARD)
            mlDrive.spin(FORWARD)
            mrDrive.spin(FORWARD)
        else:
            if(controller_1.buttonX.pressing()):
                drivesetstop(BRAKE)
                drivestop1()
            else:
                drivestop1()
        #other motions
        if controller_1.buttonA.pressing():
            #kicker start
            catapult.spin(FORWARD)
        elif controller_1.buttonB.pressing():
            #kicker stop
            catapult.stop()
        """
        if controller_1.buttonR1.pressing():
            #expand wings
            digitaloutH.set(True)
        elif controller_1.buttonL1.pressing():
            #contract wings
            digitaloutH.set(False)
        """
        if controller_1.buttonX.pressing():
            controller_1.screen.set_cursor(1,3)
            controller_1.screen.print("frdrive:", round(frDrive.temperature(PERCENT)))
            controller_1.screen.set_cursor(6,3)
            controller_1.screen.print("cata:", round(catapult.temperature(PERCENT)))
        else:
            controller_1.screen.clear_row(3)
        # for testing purposes
        if controller_1.buttonY.pressing():
            """
            if printed is False:
                # print("lr turns:", encoder_s.position(TURNS))
                print("degrees:", inertial.heading(DEGREES))
                print("fl motor turns:", flDrive.position(TURNS))
                # print("br motor turns:", brDrive.position(TURNS))
                # print("bl motor turns:", blDrive.position(TURNS))
                # print("armpos:", arm.position(DEGREES))
                printed = True
            """
        printed = False
            
# def armSpinToPosition():
#     arm.set_stopping(HOLD)
#     curpos = arm.position(DEGREES)
#     while pidArmPos(50, curpos) is not 0:
#         # print(pidArmPos(50, curpos))                                                                            
#         arm.set_velocity(pidArmPos(50, curpos))
#         print(pidArmPos(50, curpos))
#         curpos = arm.position(DEGREES)
#         arm.spin(FORWARD)
#         wait(50, MSEC)
#     arm.stop()
def pidArmPos(setpoint, curposition):
    #velocity PID arm velocity
    Kp = 0.35
    error = setpoint - curposition
    armpower = error*Kp
    if armpower> 100:
        armpower = 100
    if 0<armpower<5:
        armpower=5
    elif 0>armpower>-5:
        armpower=-5
    if -1<error<1:
        armpower = 0
    return armpower

def skim(v):
    # gain determines how much to skim off the top
    if (v > 0):
        return -(v * 0.1)
    elif (v < 0):
        return (v * 0.1)
    return 0

def drivestop():
    frDrive.stop()
    flDrive.stop()
    brDrive.stop()
    blDrive.stop()
    mrDrive.stop()
    mlDrive.stop()
def drivestop1():
    drivesetstop(COAST)
    frDrive.stop()
    flDrive.stop()
    brDrive.stop()
    blDrive.stop()   
    wait(35, MSEC)
    drivesetstop(BRAKE)
def drivestop2():
    drivesetstop(COAST)
    frDrive.stop()
    flDrive.stop()
    brDrive.stop()
    blDrive.stop()   
    wait(45, MSEC)
    drivesetstop(BRAKE)

#FUNCTIONS
#velocities
def drivesetstop(userinput):
    frDrive.set_stopping(userinput)
    flDrive.set_stopping(userinput)
    brDrive.set_stopping(userinput)
    blDrive.set_stopping(userinput)
    mrDrive.set_stopping(userinput)
    mlDrive.set_stopping(userinput)
def drivesetvelocity(userinput):
    frDrive.set_velocity(userinput,RPM)
    flDrive.set_velocity(userinput,RPM)
    brDrive.set_velocity(userinput,RPM)
    blDrive.set_velocity(userinput,RPM)
    mrDrive.set_velocity(userinput,RPM)
    mlDrive.set_velocity(userinput,RPM)
def drivesetpercent(userinput):
    frDrive.set_velocity(userinput,PERCENT)
    flDrive.set_velocity(userinput,PERCENT)
    brDrive.set_velocity(userinput,PERCENT)
    blDrive.set_velocity(userinput,PERCENT)
    mrDrive.set_velocity(userinput,PERCENT)
    mlDrive.set_velocity(userinput,PERCENT)
#motions
def driveforward():
    frDrive.spin(FORWARD)
    flDrive.spin(FORWARD)
    blDrive.spin(FORWARD)
    brDrive.spin(FORWARD)
    mlDrive.spin(FORWARD)
    mrDrive.spin(FORWARD)
def driveforwardvelocity(userinput):
    #usually used to override previously determined global "drive velocity"
    frDrive.set_velocity(userinput,RPM)
    flDrive.set_velocity(userinput,RPM)
    brDrive.set_velocity(userinput,RPM)
    blDrive.set_velocity(userinput,RPM)
    mrDrive.set_velocity(userinput,RPM)
    mlDrive.set_velocity(userinput,RPM)
    frDrive.spin(FORWARD)
    flDrive.spin(FORWARD)
    blDrive.spin(FORWARD)
    brDrive.spin(FORWARD)
    mlDrive.spin(FORWARD)
    mrDrive.spin(FORWARD)
def driveforwardpercent(userinput):
    frDrive.set_velocity(userinput,PERCENT)
    flDrive.set_velocity(userinput,PERCENT)
    brDrive.set_velocity(userinput,PERCENT)
    blDrive.set_velocity(userinput,PERCENT)
    mrDrive.set_velocity(userinput,PERCENT)
    mlDrive.set_velocity(userinput,PERCENT)
    frDrive.spin(FORWARD)
    flDrive.spin(FORWARD)
    blDrive.spin(FORWARD)
    brDrive.spin(FORWARD)
    mlDrive.spin(FORWARD)
    mrDrive.spin(FORWARD)

#turning
def turnrightpercent(userinput):
    #negative right and positive left motor velocities, to reverse right and go fwd with left
    frDrive.set_velocity(-userinput,PERCENT)
    flDrive.set_velocity(userinput,PERCENT)
    brDrive.set_velocity(-userinput,PERCENT)
    blDrive.set_velocity(userinput,PERCENT)
    mrDrive.set_velocity(-userinput,PERCENT)
    mlDrive.set_velocity(userinput,PERCENT)
    frDrive.spin(FORWARD)
    flDrive.spin(FORWARD)
    brDrive.spin(FORWARD)
    blDrive.spin(FORWARD)
    mrDrive.spin(FORWARD)
    mlDrive.spin(FORWARD)
def turnleftpercent(userinput):
    #negative left and positive right motor velocities, to reverse right and go fwd with left
    frDrive.set_velocity(userinput,PERCENT)
    flDrive.set_velocity(-userinput,PERCENT)
    brDrive.set_velocity(userinput,PERCENT)
    blDrive.set_velocity(-userinput,PERCENT)
    mrDrive.set_velocity(userinput,PERCENT)
    mlDrive.set_velocity(-userinput,PERCENT)
    frDrive.spin(FORWARD)
    flDrive.spin(FORWARD)
    brDrive.spin(FORWARD)
    blDrive.spin(FORWARD)
    mrDrive.spin(FORWARD)
    mlDrive.spin(FORWARD)

#PIDs
def pidturnpower2(setpoint, curposition):
    global lasterrorturn
    #velocity PID turning
    #set right motors to reverse, left to forward
    #if setpoint>curposition, turns right. else, turns left
    #have to test with chord attached, might be turning around the 0 line but don't know why
    #if you are using angle wrap, have to angle wrap all values, including setpoint
    #Kp = 0.9
    Kp = 0.55 #0.54
    error = setpoint - curposition
    turnpower = error*Kp
    if turnpower> 100:
        turnpower = 100
        #makes sure turnpower not over 100% rpm
    #3
    if 0<turnpower<5:
        turnpower=5
    elif 0>turnpower>-5:
        turnpower=-5
    if -1<error<1:
        turnpower = 0

    #old tuning
    # if 0<turnpower<5:
    #     turnpower=5
    # elif 0>turnpower>-5:
    #     turnpower=-5
    # if -1<error<1:
    #     turnpower = 0
    # return turnpower
    return turnpower

def piddrivepower1(setpoint, curposition):
    #velocity
    #go to motor.turns value inputted as "setpoint"
    #if setpoint > curposition, drives forward. If not, reverses.
    Kp = 40 #100
    #can't set motor power...should i use voltage and pid or use velocity?
    error = setpoint - curposition
    drivepower = error*Kp
    if drivepower> 100 or drivepower < -100:
        if drivepower > 0:
            coeff = 1
        else:
            coeff = -1
        drivepower = 100*coeff
        #makes sure turnpower not over 100% rpm
    #10
    if 0 <=drivepower < 9:
        drivepower = 9
    if -9 <drivepower <0:
        drivepower = -9
    #0.01
    if -0.05<error<0.05:
        drivepower=0
    #velocity 10
    # if 0 <=drivepower < 15:
    #     drivepower = 15
    # if -15 <drivepower <0:
    #     drivepower = -15
    # #0.01
    # if -0.1<error<0.1:
    #     drivepower=0
    return drivepower


def piddrivepower2(setpoint, curposition):
    #velocity
    #go to distance sensor value inputted as "setpoint"
    #if curposition > setpoint, drives forward. If not, reverses.
    Kp = 0.15
    Ki = 0
    Kd = 0
    #PID for drive straight (front)
    #global integraldistance
    #global lasterrordistance
    error = curposition - setpoint
    #integraldistance += error
    #derivative = error-lasterrordistance
    #lasterrordistance = error
    drivepower = error*Kp#+integraldistance*Ki+derivative*Kd
    #3
    if 0 <=drivepower < 5:
        drivepower = 5
    if -5 <drivepower <0:
        drivepower = -5
    if -3<error<3:
        drivepower=0
    return drivepower


#SKILLS FUNCTIONS
def avgturns():
    avg = (frDrive.position(TURNS) + flDrive.position(TURNS) + brDrive.position(TURNS) + blDrive.position(TURNS))/4
    return avg
def anglewrapdeg(deg):
    #converts angles above 180 to a negative angle under 180 and vice versa
    if(deg>180):
        deg = deg - 360
    # elif(deg<-180):
    #     deg = deg + 360
    return deg
# test()
comp = Competition(user_control, autonomous)
pre_autonomous()

frDrive.spin_for(FORWARD, 1, TURNS)
frDrive.stop()
wait(1, SECONDS)

mrDrive.spin_for(FORWARD, 1, TURNS)
mrDrive.stop()
wait(1, SECONDS)

brDrive.spin_for(FORWARD, 1, TURNS)
brDrive.stop()
wait(1, SECONDS)

flDrive.spin_for(FORWARD, 1, TURNS)
flDrive.stop()
wait(1, SECONDS)

mlDrive.spin_for(FORWARD, 1, TURNS)
mlDrive.stop()
wait(1, SECONDS)

blDrive.spin_for(FORWARD, 1, TURNS)
blDrive.stop()
wait(1, SECONDS)

user_control()
